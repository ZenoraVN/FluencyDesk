import React, { useState } from 'react'
import WritingHistory from './components/WritingHistory'
import ExamAndTaskZone from './components/ExamAndTaskZone'
import TopicSelector from './components/TopicSelector'
import AiPromptInput from './components/AiPromptInput'
import ExamPreviewAndAction from './components/ExamPreviewAndAction'

type ExamTypeKey = 'IELTS' | 'TOEIC' | 'TOEFL' | 'CEFR'

interface TaskType {
  key: string
  name: string
  description: string
  time: string
  words: string
  topics?: string[]
}

interface MyExamType {
  key: ExamTypeKey
  label: string
  info: string
  tasks: TaskType[]
}

const EXAM_TYPES: MyExamType[] = [
  {
    key: 'IELTS',
    label: 'IELTS',
    info: '2 task types',
    tasks: [
      {
        key: 'task1',
        name: 'Task 1 (Chart / Letter)',
        description: 'Write a letter or chart report',
        time: '20 minutes',
        words: '~150 words',
        topics: undefined
      },
      {
        key: 'task2',
        name: 'Task 2 (Essay)',
        description: 'Essay argumentative/opinion',
        time: '40 minutes',
        words: '~250 words',
        topics: [
          'Environment',
          'Technology',
          'Education',
          'Health',
          'Society',
          'Business',
          'Travel',
          'Culture'
        ]
      }
    ]
  },
  {
    key: 'TOEIC',
    label: 'TOEIC',
    info: '3 task types',
    tasks: [
      {
        key: 'email',
        name: 'Write Email',
        description: 'Write an email related to business/office',
        time: '15 minutes',
        words: '~120 words',
        topics: ['Business', 'Society', 'Culture']
      },
      {
        key: 'essay',
        name: 'Write Essay',
        description: 'Varied topics about life & work',
        time: '30 minutes',
        words: '~150 words',
        topics: ['Business', 'Health', 'Travel', 'Society']
      },
      {
        key: 'letter',
        name: 'Business Letter',
        description: 'Write a letter for work purposes',
        time: '20 minutes',
        words: '~100 words',
        topics: undefined
      }
    ]
  },
  {
    key: 'TOEFL',
    label: 'TOEFL',
    info: '2 task types',
    tasks: [
      {
        key: 'independent',
        name: 'Independent Writing',
        description: 'Personal/Opinion Essay',
        time: '30 minutes',
        words: '~300 words',
        topics: ['Environment', 'Education', 'Society', 'Travel']
      },
      {
        key: 'integrated',
        name: 'Integrated Writing',
        description: 'Combine listening, reading, writing skills',
        time: '20 minutes',
        words: '~150-225 words',
        topics: undefined
      }
    ]
  },
  {
    key: 'CEFR',
    label: 'CEFR',
    info: '3 task types',
    tasks: [
      {
        key: 'letter',
        name: 'Letter',
        description: 'Write a personal/work letter',
        time: '15 minutes',
        words: '~80 words',
        topics: undefined
      },
      {
        key: 'essay',
        name: 'Essay',
        description: 'Opinion essay on social topics',
        time: '25 minutes',
        words: '~150 words',
        topics: ['Environment', 'Culture', 'Business', 'Society']
      },
      {
        key: 'article',
        name: 'Article',
        description: 'Write an article for a newspaper or magazine',
        time: '25 minutes',
        words: '~150 words',
        topics: ['Technology', 'Culture', 'Health']
      }
    ]
  }
]

const PracticeWritingPage: React.FC = () => {
  const [selectedExam, setSelectedExam] = useState<ExamTypeKey>('IELTS')
  const exam = EXAM_TYPES.find((e) => e.key === selectedExam)!
  const [selectedTask, setSelectedTask] = useState(exam.tasks[0].key)
  const [customTopic, setCustomTopic] = useState('')
  const [selectedTopic, setSelectedTopic] = useState('Random')
  const [aiPrompt, setAiPrompt] = useState('')
  const [preview, setPreview] = useState<string | null>(null)
  const [created, setCreated] = useState(false)

  React.useEffect(() => {
    setSelectedTask(EXAM_TYPES.find((e) => e.key === selectedExam)!.tasks[0].key)
  }, [selectedExam])

  React.useEffect(() => {
    setSelectedTopic('Random')
    setCustomTopic('')
    setAiPrompt('')
    setPreview(null)
    setCreated(false)
  }, [selectedTask, selectedExam])

  const selectedTaskObj = exam.tasks.find((t) => t.key === selectedTask)
  const topics = selectedTaskObj?.topics || []

  // Generate prompt
  const handleCreateExam = (mode: 'prompt' | 'random') => {
    setCreated(true)
    setPreview(
      mode === 'prompt'
        ? `Exam generated by AI with prompt: "${aiPrompt.trim()}".\n\n(This is a preview only. The actual content will vary.)`
        : `A random exam is generated for "${selectedTaskObj?.name}" with topic "${selectedTopic === 'Other' ? customTopic || '...' : selectedTopic}".\n\n(This is a preview only. The actual content will vary.)`
    )
  }

  return (
    <div className="flex flex-row h-screen gap-6 px-4 pt-4 pb-8">
      {/* Panel trái: scroll độc lập */}
      <div className="w-1/3 flex flex-col h-full overflow-y-auto bg-background border-r pr-4">
        <WritingHistory />
        <div className="flex-1 mt-8 bg-background border rounded-xl flex items-center justify-center text-gray-400 text-md">
          (Statistics coming soon)
        </div>
      </div>
      {/* Panel phải: scroll độc lập */}
      <div className="w-2/3 flex flex-col h-full overflow-y-auto">
        <div>
          <ExamAndTaskZone
            examTypes={EXAM_TYPES}
            selectedExam={selectedExam}
            onSelectExam={setSelectedExam}
            tasks={exam.tasks}
            selectedTask={selectedTask}
            onSelectTask={setSelectedTask}
            selectedTaskObj={selectedTaskObj}
          />
        </div>
        {/* Chủ đề - chỉ hiện nếu task có topics */}
        {topics.length > 0 && (
          <TopicSelector
            topics={topics}
            selectedTopic={selectedTopic}
            onSelect={setSelectedTopic}
            customTopic={customTopic}
            setCustomTopic={setCustomTopic}
          />
        )}
        <AiPromptInput
          value={aiPrompt}
          onChange={setAiPrompt}
          onCreateByPrompt={() => handleCreateExam('prompt')}
          onCreateRandom={() => handleCreateExam('random')}
          disableCreateByPrompt={!aiPrompt.trim()}
        />
        <ExamPreviewAndAction preview={preview} enabled={created} />
      </div>
    </div>
  )
}

export default PracticeWritingPage
